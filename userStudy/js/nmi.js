function findIntersection(t,n){return t.filter(function(t){return-1!=n.indexOf(t)})}function extractTimePointCluster(t,n){var e=t.filter(function(t){return-1!=t.xRange.indexOf(n)}),r=e.length,u=d3.nest().key(function(t){return t.clusterId}).entries(e).filter(function(t){return-1!=t.key}),c=u.map(function(t){return{clusterId:t.key,prob:t.values.length/r,includeLine:t.values.map(function(t){return t.lineContent})}});return {clusterProb:c,totalNum:r,clusters:c.map(function(t){return t.clusterId})}}function computeI(t,n){var e=t.totalNum,r=0;return t.clusterProb.forEach(function(t){n.clusterProb.forEach(function(n){var u=findIntersection(t.includeLine,n.includeLine),c=u.length/e;0!=c&&(r+=c*Math.log(c/(t.prob*n.prob)))})}),r}function computeH(t){var n=t.map(function(t){return-t.prob*Math.log(t.prob)}),e=d3.sum(n);return e}function nmi(t,n){var e=n.map(function(n){return extractTimePointCluster(t,n)}),r=findIntersection(e[0].clusters,e[1].clusters);if(r.length==e[0].clusters.length&&r.length==e[1].clusters.length)return-1;var u=computeI(e[0],e[1]),c=e.map(function(t){return computeH(t.clusterProb)}),o=1;return c[0]+c[1]!=0&&(o=2*u/(c[0]+c[1])),o}