function findIntersection(n,t){return n.filter(function(n){return-1!=t.indexOf(n)})}function extractTimePointCluster(n,t){var e=n.filter(function(n){return-1!=n.xRange.indexOf(t)}),r=e.length,u=d3.nest().key(function(n){return n.clusterId}).entries(e).filter(function(n){return-1!=n.key}),c=u.map(function(n){return{clusterId:n.key,prob:n.values.length/r,includeLine:n.values.map(function(n){return n.lineContent})}});return{clusterProb:c,totalNum:r,clusters:c.map(function(n){return n.clusterId})}}function computeI(n,t){var e=n.totalNum,r=0;return n.clusterProb.forEach(function(n){t.clusterProb.forEach(function(t){var u=findIntersection(n.includeLine,t.includeLine),c=u.length/e;0!=c&&(r+=c*Math.log(c/(n.prob*t.prob)))})}),r}function computeH(n){var t=n.map(function(n){return-n.prob*Math.log(n.prob)}),e=d3.sum(t);return e}function nmi(n,t){var e=t.map(function(t){return extractTimePointCluster(n,t)}),r=findIntersection(e[0].clusters,e[1].clusters);if(r.length==e[0].clusters.length&&r.length==e[1].clusters.length)return-1;var u=computeI(e[0],e[1]),c=e.map(function(n){return computeH(n.clusterProb)}),i=1;return c[0]+c[1]!=0&&(i=2*u/(c[0]+c[1])),i}